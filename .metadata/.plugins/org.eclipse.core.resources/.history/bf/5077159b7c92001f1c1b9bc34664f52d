package com.hub.controller;

import java.time.LocalDate;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.hub.domain.PersonStat;
import com.hub.domain.User;
import com.hub.dto.PageRequestDTO;
import com.hub.dto.PageResponseDTO;
import com.hub.dto.PersonStatDTO;
import com.hub.dto.ReserveDTO;
import com.hub.dto.UserDTO;
import com.hub.repository.PersonStatRepository;
import com.hub.repository.UserRepository;
import com.hub.service.ReserveService;
import com.hub.service.UserService;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

@RestController
@RequiredArgsConstructor
@Log4j2
@RequestMapping("/api/reserve")
public class ReserveController {

	private final ReserveService service;
	private final UserService userService; // UserService 주입
	private final UserRepository userRepository;
	private final PersonStatRepository personStatRepository;

	// 데이터 1개 읽어오기
	@GetMapping("/{rsNb}")
	public ReserveDTO get(@PathVariable(name = "rsNb") Long rsNb) {
		return service.get(rsNb);
	}

	// 데이터 리스트 읽어오기
	@PreAuthorize("hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')")
	@GetMapping("/list")
	public PageResponseDTO<ReserveDTO> list(@RequestParam(name = "paid", required = false) Boolean paid,
			PageRequestDTO pageRequestDTO) {

		log.info("List request with paid filter: " + paid);

		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String userRole = authentication.getAuthorities().stream().findFirst().map(GrantedAuthority::getAuthority)
				.orElse("");

		if ("ROLE_ADMIN".equals(userRole)) {
			// 관리자는 모든 예약 리스트를 가져옵니다.
			return service.list(pageRequestDTO);
		} else {
			// 일반 사용자는 paid 파라미터에 따라 다른 리스트를 반환합니다.
			if (Boolean.TRUE.equals(paid)) {
				log.info("@@PaidList:" + service.paidReservationsList(pageRequestDTO));
				return service.paidReservationsList(pageRequestDTO);
			} else {
				return service.activeReservationsList(pageRequestDTO);
			}
		}
	}

	// 데이터 등록하기
	@PostMapping("/")
	public Map<String, Long> register(@RequestBody ReserveDTO reserveDTO) {

		// 현재 로그인한 사용자의 ID 가져오기
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String urId = ((UserDTO) authentication.getPrincipal()).getUrId(); // UserDTO에서 urId 가져옴

		// User 객체 조회
		User user = userRepository.findByUrId(urId); // UserRepository를 통해 User 객체를 가져옴
		if (user == null) {
			throw new RuntimeException("User with id " + urId + " not found");
		}

		// ReserveDTO에 유저 ID 설정
		reserveDTO.setUrId(urId);

		log.info("@@@@@ReserveDTO: " + reserveDTO);

		Long rsNb = service.register(reserveDTO);

		return Map.of("rsNb", rsNb);
	}

	// 데이터 수정하기
	@PutMapping("/{rsNb}")
	public Map<String, String> modify(@PathVariable(name = "rsNb") Long rsNb, @RequestBody ReserveDTO reserveDTO) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String userId = ((UserDTO) authentication.getPrincipal()).getUrId(); // UserDTO에서 urId 가져옴

		reserveDTO.setRsNb(rsNb);
		log.info("Modify:" + reserveDTO);
		service.modify(reserveDTO);

		return Map.of("RESULT", "SUCCESS");
	}

	// 데이터 삭제하기
	@DeleteMapping("/{rsNb}")
	public Map<String, String> remove(@PathVariable(name = "rsNb") Long rsNb) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String userId = ((UserDTO) authentication.getPrincipal()).getUrId(); // UserDTO에서 urId 가져옴

		log.info("Remove: " + rsNb);
		service.remove(rsNb);

		return Map.of("RESULT", "SUCCESS");
	}

	// 결제 상태 업데이트
	@PutMapping("/{rsNb}/payment-status")
	public ResponseEntity<?> updatePaymentStatus(@PathVariable Long rsNb) {
		try {
			service.updatePaymentStatus(rsNb);
			return ResponseEntity.ok("결제 상태가 업데이트되었습니다.");
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("결제 상태 업데이트 중 오류가 발생했습니다.");
		}
	}

	// 예약 방문 여부 변경
	// 변경이 일어날 시, 통계 테이블에 업데이트
	@PutMapping("/{rsNb}/visit-status")
	public ResponseEntity<?> changeVisitStatus(@PathVariable Long rsNb, @RequestParam boolean visitStatus) {
		try {
			// 예약 방문 여부 변경
			service.changeVisitStatus(rsNb, visitStatus);
			log.info("Changing visit status for reservation ID: {}, New status: {}", rsNb, visitStatus);

			// 변경된 예약 정보 가져오기
			ReserveDTO reserveDTO = service.get(rsNb);
			log.info("Updated Reserve: {}", reserveDTO);

			// 예약 날짜를 기반으로 통계 업데이트
			LocalDate statDate = reserveDTO.getRsDt().toLocalDate();

			// 통계 가져오기 또는 오류 처리
	        PersonStat personStat = personStatRepository.findByPsDt(statDate)
	                .orElseThrow(() -> new RuntimeException("통계가 존재하지 않습니다."));

			log.info("Person Statistics for Date {}: {}", statDate, personStat);

			return ResponseEntity.ok("예약 방문 여부와 통계가 성공적으로 업데이트되었습니다.");
		} catch (Exception e) {
			log.error("Error updating visit status or statistics", e);
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("예약 방문 여부 업데이트 중 오류 발생");
		}
	}

}
